Description: >
  05-ec2 - kyle.shenk.labs - CloudWatch battle

Parameters:
  UbuntuNameParam:
    Type: String
    Default: ubuntu-02
    Description: Name of the instance
  VpcId:
    Type: String
    Default: vpc-0f974fd8c0e1d5603
    Description: VPC Id Of the VPC we're in
  SubnetId:
    Type: String
    Default: subnet-00a6bf0402a393964
    Description: subnet to throw on the netiface
  UbuntuInstanceType:
    Type: String
    Default: t2.micro
    Description: Instance size to use
  SSMKey:
    # aws ssm put-parameter --name cwconfig --type String --value file:///aws/amazon-cloudwatch-agent.json
    Description: Name of parameter store which contains the json configuration of CWAgent.
    Type: String
    Default: cwconfig
  CWLogGroupName:
    Description: Name of the log group for cloudwatch
    Type: String
    Default: amazon-cloudwatch-agent.log
  CWLogStreamName:
    Description: Name of the log stream for the log group for cloudwatch
    Type: String
    Default: amazon-cloudwatch-agent.log
  CWDownloadURL:
    Description: Full URL of the cloudwatch package to download
    Type: String
    Default: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb

Outputs:
  UbuntuPubIPV4:
    Description: IPv4 address of the Ubuntu Instance
    Value: !Ref UbuntuEIP02

Resources:
  CloudWatchRole02:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Description: Allow actions to be performed with CloudWatch
      Path: /
      RoleName: ks-cw-role

  SSMManagedPolicy02:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows for interaction with SSM Parameter Store
      Path: /
      Roles:
        - Ref: CloudWatchRole02
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ssm:PutParameter"
              - "ssm:DeleteParameter"
              - "ssm:GetParameterHistory"
              - "ssm:GetParametersByPath"
              - "ssm:GetParameters"
              - "ssm:GetParameter"
              - "ssm:DeleteParameters"
              - "ssm:DescribeParameters"
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
          - Effect: Allow
            Action:
              - "logs:PutLogEvents"
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CWLogGroupName}:log-stream:${CWLogStreamName}'

  CWInstanceProfile02:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: ks-cw-profile
      Roles: 
        - Ref: CloudWatchRole02

  BasicSecurityGroup02:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BasicSecurityGroup02
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
  
  CWLogGroup02:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref CWLogGroupName
  
  CWLogStream02:
    Type: AWS::Logs::LogStream
    Properties:
      LogStreamName: !Ref CWLogStreamName
      LogGroupName: !Ref CWLogGroup02

  EC2InstanceTpl02:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: EC2InstanceTpl02
      LaunchTemplateData:
        DisableApiTermination: False
        EbsOptimized: False
        InstanceInitiatedShutdownBehavior: stop
        InstanceType: !Ref UbuntuInstanceType
        KeyName: ks-aws
        SecurityGroupIds:
          - !GetAtt BasicSecurityGroup02.GroupId
        IamInstanceProfile:
          Arn: !GetAtt CWInstanceProfile02.Arn

  UbuntuEC2Instance02:
    Type: AWS::EC2::Instance
    DependsOn: EC2InstanceTpl02
    Metadata:
      ## CloudFormation::Init section was 'borrowed' directly from AWS
      ## curl -O https://raw.githubusercontent.com/awslabs/aws-cloudformation-templates/master/aws/solutions/AmazonCloudWatchAgent/ssm/amazon_linux.template
      AWS::CloudFormation::Init:
        configSets:
          kscfnbootcamp:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of a dummy file, that change the contents of the dummy file can trigger the agent to reload the configuration from SSM parameter store.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/dummy.version':
              content: !Sub |
                "You can change the VERSION below to to simulate the update of metadata"
                "VERSION=1.0"
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command:
                ## fwiw, I get this syntax, but this seems more convoluted than just !Sub 'stuff-and-options ssm:${SSMKey}'
                Fn::Sub:
                  - |
                    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s
                  - { ssmkey: !Ref SSMKey }
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            00_cw_dl:
              command: !Sub 'wget ${CWDownloadURL}'
              cwd: "~"
            01_cw_install:
              command: sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
              cwd: "~"
            02_cw_get_config:
              command: !Sub '/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${SSMKey} -s'
            03_enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            04_start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      ImageId: ami-05dfb019c35511c71
      LaunchTemplate: 
        LaunchTemplateName: EC2InstanceTpl02
        Version: !GetAtt EC2InstanceTpl02.LatestVersionNumber
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Ref UbuntuNameParam
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
               #!/bin/bash
               /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets kscfnbootcamp
               /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
            - { ssmkey: !Ref SSMKey }

  UbuntuEIP02:
    Type: AWS::EC2::EIP
    DependsOn: UbuntuEC2Instance02
    Properties:
      InstanceId: !Ref UbuntuEC2Instance02
